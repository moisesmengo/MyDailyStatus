{"version":3,"file":"static/webpack/static/development/pages/app.js.9399dcc8eff6f7d6bdb4.hot-update.js","sources":["webpack:///./lib/geo.js","webpack:///./pages/app.js"],"sourcesContent":["//alert(calcCrow(59.3293371,13.4877472,59.3225525,13.4619422).toFixed(1));\n\n    //This function takes in latitude and longitude of two location and returns the distance between them as the crow flies (in km)\n    export function distance(lat1, lon1, lat2, lon2) \n    {\n      var R = 6371; // km\n      var dLat = toRad(lat2-lat1);\n      var dLon = toRad(lon2-lon1);\n      var lat1 = toRad(lat1);\n      var lat2 = toRad(lat2);\n\n      var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n        Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); \n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n      var d = R * c;\n      return d;\n    }\n\n    // Converts numeric degrees to radians\n    function toRad(Value) \n    {\n        return Value * Math.PI / 180;\n    }","import React, {useEffect} from 'react'\nimport auth0 from '../lib/auth0'\nimport router from 'next/router'\nimport {db} from '../lib/db'\nimport {distance} from '../lib/geo'\n\nconst App = props =>{\n    useEffect(() => {\n        if(!props.isAuth){\n            router.push('/')\n        } else if(props.forceCreate){\n            router.push('/create-status')\n        }\n    })\n    if(!props.isAuth || props.forceCreate){\n        return null\n    }\n    return (\n        <div>\n            <h1>Status próximos a você:</h1>\n            <table>\n                {props.checkins.map(checkin => {\n                    return(\n                        <tr>\n                            <td>{checkin.id}</td>\n                            <td>{checkin.status}</td>\n                            <td>{JSON.stringify(checkin.coords)}</td>\n                        </tr>\n                    )\n                })}\n            </table>\n        </div>\n    )\n}\n\nexport default App\n\nexport async function getServerSideProps({req, res}){\n    const session = await auth0.getSession(req)\n    if(session){\n        const today = new Date()\n        const currentDate = today.getFullYear() + '-' + today.getMonth() + '-' + today.getDate()\n        const todaysCheckin = await db\n            .collection('markers')\n            .doc(currentDate)\n            .collection('checks')\n            .doc(session.user.sub)\n            .get()\n        const todayData =  todaysCheckin.data()\n        let forceCreate = true\n        if(todayData){\n            //pode ver os outros checkins\n            forceCreate = false\n            const checkins = await db.collection('markers')\n                .doc(currentDate).collection('checks')\n                .near({\n                    center: todayData.coordinates,\n                    radius: 1000\n                }).get()\n                const checkinsList = []\n                checkins.docs.forEach(doc=>{\n                    checkinsList.push({\n                        id: doc.id,\n                        status: doc.data().status,\n                        coords: {\n                            lat: doc.data().coordinates.latitude,\n                            long: doc.data().coordinates.longitude\n                        }\n                    })\n                })\n                return{\n                    props:{\n                        isAuth: true,\n                        user: session.user,\n                        forceCreate: false,\n                        checkins: checkinsList\n                    }\n                }\n        }\n        console.log(todaysCheckin.data())\n        \n        return{\n            props:{\n                isAuth: true,\n                user: session.user,\n                forceCreate\n            }\n        }\n    }\n    return{\n        props: {\n            isAuth: false,\n            user: {}\n        }\n    }\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;;AACA;;;;A","sourceRoot":""}